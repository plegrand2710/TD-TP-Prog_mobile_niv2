===== BodyPart.java =====
package com.TD1.Pauline;

import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Batch;

public class BodyPart {
    private float x, y;
    private Texture texture;

    public BodyPart(Texture texture) {
        this.texture = texture;
    }

    public void updateBodyPosition(float x, float y) {
        this.x = x;
        this.y = y;
    }

    public float getX() {
        return x;
    }

    public float getY() {
        return y;
    }

    public void draw(Batch batch) {
        batch.draw(texture, x, y);
    }
}

---------------------------

===== DBAdapter.java =====
package com.TD1.Pauline;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.utils.Array;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public class DBAdapter {
    private static final String DATABASE_NAME = "GameScoresDB.db";
    private static final String TABLE_SCORES = "scores";
    private static final String KEY_ID = "id";
    private static final String KEY_PSEUDO = "pseudo";
    private static final String KEY_SCORE = "score";
    private Connection connection;

    public DBAdapter() {
        try {
            FileHandle dbFile = Gdx.files.local(DATABASE_NAME);
            String url = "jdbc:sqlite:" + dbFile.file().getAbsolutePath();
            connection = DriverManager.getConnection(url);
            createTable();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void createTable() {
        String sql = "CREATE TABLE IF NOT EXISTS " + TABLE_SCORES + " (" +
            KEY_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
            KEY_PSEUDO + " TEXT NOT NULL, " +
            KEY_SCORE + " INTEGER NOT NULL)";
        try (Statement stmt = connection.createStatement()) {
            stmt.execute(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void insertScore(String pseudo, int score) {
        String sql = "INSERT INTO " + TABLE_SCORES + " (" + KEY_PSEUDO + ", " + KEY_SCORE + ") VALUES (?, ?)";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, pseudo);
            pstmt.setInt(2, score);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public Array<String> getAllScores() {
        Array<String> scoresList = new Array<>();
        String sql = "SELECT " + KEY_PSEUDO + ", " + KEY_SCORE + " FROM " + TABLE_SCORES + " ORDER BY " + KEY_SCORE + " DESC";
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                String pseudo = rs.getString(KEY_PSEUDO);
                int score = rs.getInt(KEY_SCORE);
                scoresList.add(pseudo + " - " + score);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return scoresList;
    }

    public ArrayList<String> getTop3Scores() {
        ArrayList<String> topScores = new ArrayList<>();
        String sql = "SELECT " + KEY_PSEUDO + ", " + KEY_SCORE + " FROM " + TABLE_SCORES + " ORDER BY " + KEY_SCORE + " DESC LIMIT 3";
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                String pseudo = rs.getString(KEY_PSEUDO);
                int score = rs.getInt(KEY_SCORE);
                topScores.add(pseudo + " - " + score);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return topScores;
    }

    public void updateScore(int id, String pseudo, int score) {
        String sql = "UPDATE " + TABLE_SCORES + " SET " + KEY_PSEUDO + " = ?, " + KEY_SCORE + " = ? WHERE " + KEY_ID + " = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, pseudo);
            pstmt.setInt(2, score);
            pstmt.setInt(3, id);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void deleteScore(int id) {
        String sql = "DELETE FROM " + TABLE_SCORES + " WHERE " + KEY_ID + " = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setInt(1, id);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void deleteAllScores() {
        String sql = "DELETE FROM " + TABLE_SCORES;
        try (Statement stmt = connection.createStatement()) {
            stmt.execute(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

---------------------------

===== GameScreen.java =====
package com.TD1.Pauline;

import com.badlogic.gdx.Game;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.InputMultiplexer;
import com.badlogic.gdx.ScreenAdapter;
import com.badlogic.gdx.graphics.Camera;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Pixmap;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.GlyphLayout;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Touchpad;
import com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.ScreenUtils;
import com.badlogic.gdx.utils.viewport.FitViewport;
import com.badlogic.gdx.utils.viewport.ScreenViewport;
import com.badlogic.gdx.utils.viewport.Viewport;

public class GameScreen extends ScreenAdapter {

    private static final float MOVE_TIME = 0.5f;
    private static final int GRID_CELL = 32;
    private static final int SNAKE_MOVEMENT = GRID_CELL;
    private static final float WORLD_WIDTH = 640;
    private static final float WORLD_HEIGHT = 480;
    private static final int RIGHT = 0, LEFT = 1, UP = 2, DOWN = 3;
    private static final int POINTS_PER_APPLE = 20;
    private static final String GAME_OVER_TEXT = "Game Over... Tap space to restart!";
    private boolean DEBUG = true;
    private ShapeRenderer shapeRenderer;
    private BitmapFont bitmapFont;
    private Viewport viewport;
    private Camera camera;
    private SpriteBatch batch;
    private Texture snakeHead, snakeBody, apple;

    private boolean appleAvailable = false;
    private float appleX, appleY;
    private float timer = MOVE_TIME;
    private float snakeX = 0, snakeY = 0;
    private float snakeXBeforeUpdate = 0, snakeYBeforeUpdate = 0;
    private int snakeDirection = RIGHT;
    private boolean directionSet = false;
    private int score = 0;
    private Array<BodyPart> bodyParts = new Array<BodyPart>();
    private GlyphLayout layout = new GlyphLayout();

    private enum STATE { PLAYING, GAME_OVER }
    private STATE state = STATE.PLAYING;

    private String controlMode;

    private Stage uiStage;
    private Touchpad touchpad;

    private float debugAngle = 0;
    private DBAdapter dbAdapter;

    public GameScreen(Game game, String controlMode) {
        this.controlMode = controlMode;
        this.dbAdapter = new DBAdapter(); // Initialisation de la base de donn√©es
    }

    @Override
    public void resize(int width, int height) {
        viewport.update(width, height);
        if (uiStage != null) {
            uiStage.getViewport().update(width, height, true);
        }
    }

    @Override
    public void show() {
        camera = new OrthographicCamera(Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
        camera.position.set(WORLD_WIDTH / 2, WORLD_HEIGHT / 2, 0);
        camera.update();
        viewport = new FitViewport(WORLD_WIDTH, WORLD_HEIGHT, camera);

        bitmapFont = new BitmapFont();
        shapeRenderer = new ShapeRenderer();
        batch = new SpriteBatch();

        snakeHead = new Texture(Gdx.files.internal("snakehead.png"));
        snakeBody = new Texture(Gdx.files.internal("snakeBody.png"));
        apple = new Texture(Gdx.files.internal("apple.png"));

        if ("touchpad".equalsIgnoreCase(controlMode)) {
            uiStage = new Stage(new ScreenViewport());
            Touchpad.TouchpadStyle touchpadStyle = new Touchpad.TouchpadStyle();

            Pixmap bgPixmap = new Pixmap(100, 100, Pixmap.Format.RGBA8888);
            bgPixmap.setColor(Color.GRAY);
            bgPixmap.fillCircle(50, 50, 50);
            Texture bgTexture = new Texture(bgPixmap);
            bgPixmap.dispose();

            Pixmap knobPixmap = new Pixmap(50, 50, Pixmap.Format.RGBA8888);
            knobPixmap.setColor(Color.DARK_GRAY);
            knobPixmap.fillCircle(25, 25, 25);
            Texture knobTexture = new Texture(knobPixmap);
            knobPixmap.dispose();

            touchpadStyle.background = new TextureRegionDrawable(bgTexture);
            touchpadStyle.knob = new TextureRegionDrawable(knobTexture);

            touchpad = new Touchpad(10, touchpadStyle);
            touchpad.setBounds(15, 15, 200, 200);
            uiStage.addActor(touchpad);

            InputMultiplexer multiplexer = new InputMultiplexer();
            multiplexer.addProcessor(uiStage);
            Gdx.input.setInputProcessor(multiplexer);
        } else {
            Gdx.input.setInputProcessor(null);
        }
    }

    @Override
    public void render(float delta) {
        switch (state) {
            case PLAYING:
                queryInput();
                updateSnake(delta);
                checkAppleCollision();
                checkAndPlaceApple();
                break;
            case GAME_OVER:
                checkForRestart();
                break;
        }
        clearScreen();
        drawGrid();
        draw();
        if ("touchpad".equalsIgnoreCase(controlMode) && uiStage != null) {
            uiStage.act(delta);
            uiStage.draw();
        }
        if ("gyroscope".equalsIgnoreCase(controlMode)) {
            drawDebugArrow();
        }
    }

    private void queryInput() {
        if ("gyroscope".equalsIgnoreCase(controlMode)) {
            float thresholdDegrees = 5f;

            float ax = Gdx.input.getAccelerometerX();
            float ay = Gdx.input.getAccelerometerY();
            float az = Gdx.input.getAccelerometerZ();

            float pitch = MathUtils.atan2(-ax, (float) Math.sqrt(ay * ay + az * az)) * MathUtils.radiansToDegrees;
            float roll = MathUtils.atan2(ay, az) * MathUtils.radiansToDegrees;

            if (Math.abs(pitch) > Math.abs(roll)) {
                if (pitch > thresholdDegrees) {
                    updateDirection(UP);
                    debugAngle = 90;
                } else if (pitch < -thresholdDegrees) {
                    updateDirection(DOWN);
                    debugAngle = 270;
                }
            } else {
                if (roll > thresholdDegrees) {
                    updateDirection(RIGHT);
                    debugAngle = 0;
                } else if (roll < -thresholdDegrees) {
                    updateDirection(LEFT);
                    debugAngle = 180;
                }
            }
        } else if ("touchpad".equalsIgnoreCase(controlMode)) {
            float knobX = touchpad.getKnobPercentX();
            float knobY = touchpad.getKnobPercentY();
            float threshold = 0.3f;
            if (Math.abs(knobX) > Math.abs(knobY)) {
                if (knobX > threshold) {
                    updateDirection(RIGHT);
                } else if (knobX < -threshold) {
                    updateDirection(LEFT);
                }
            } else {
                if (knobY > threshold) {
                    updateDirection(UP);
                } else if (knobY < -threshold) {
                    updateDirection(DOWN);
                }
            }
        } else {
            if (Gdx.input.isKeyPressed(Input.Keys.LEFT)) updateDirection(LEFT);
            if (Gdx.input.isKeyPressed(Input.Keys.RIGHT)) updateDirection(RIGHT);
            if (Gdx.input.isKeyPressed(Input.Keys.UP)) updateDirection(UP);
            if (Gdx.input.isKeyPressed(Input.Keys.DOWN)) updateDirection(DOWN);
        }
    }

    private void checkForRestart() {
        if (Gdx.input.isKeyPressed(Input.Keys.SPACE)) doRestart();
    }

    private void doRestart() {
        dbAdapter.insertScore("Joueur", score); // Enregistrer le score avant de red√©marrer
        state = STATE.PLAYING;
        bodyParts.clear();
        snakeDirection = RIGHT;
        directionSet = false;
        timer = MOVE_TIME;
        snakeX = 0;
        snakeY = 0;
        snakeXBeforeUpdate = 0;
        snakeYBeforeUpdate = 0;
        appleAvailable = false;
        score = 0;
    }

    private void updateDirection(int newSnakeDirection) {
        if (!directionSet && snakeDirection != newSnakeDirection) {
            directionSet = true;
            switch (newSnakeDirection) {
                case LEFT:
                    updateIfNotOppositeDirection(newSnakeDirection, RIGHT);
                    break;
                case RIGHT:
                    updateIfNotOppositeDirection(newSnakeDirection, LEFT);
                    break;
                case UP:
                    updateIfNotOppositeDirection(newSnakeDirection, DOWN);
                    break;
                case DOWN:
                    updateIfNotOppositeDirection(newSnakeDirection, UP);
                    break;
            }
        }
    }

    private void updateIfNotOppositeDirection(int newSnakeDirection, int oppositeDirection) {
        if ((snakeDirection != oppositeDirection) || bodyParts.size == 0)
            snakeDirection = newSnakeDirection;
    }

    private void updateSnake(float delta) {
        timer -= delta;
        if (timer <= 0) {
            timer = MOVE_TIME;
            moveSnake();
            checkForOutOfBounds();
            updateBodyPartsPosition();
            checkSnakeBodyCollision();
            directionSet = false;
        }
    }

    private void moveSnake() {
        snakeXBeforeUpdate = snakeX;
        snakeYBeforeUpdate = snakeY;
        switch (snakeDirection) {
            case RIGHT:
                snakeX += SNAKE_MOVEMENT;
                return;
            case LEFT:
                snakeX -= SNAKE_MOVEMENT;
                return;
            case UP:
                snakeY += SNAKE_MOVEMENT;
                return;
            case DOWN:
                snakeY -= SNAKE_MOVEMENT;
                return;
        }
    }

    private void checkForOutOfBounds() {
        if (snakeX >= viewport.getWorldWidth()) snakeX = 0;
        if (snakeX < 0) snakeX = MathUtils.round(viewport.getWorldWidth()) - SNAKE_MOVEMENT;
        if (snakeY >= viewport.getWorldHeight()) snakeY = 0;
        if (snakeY < 0) snakeY = MathUtils.round(viewport.getWorldHeight()) - SNAKE_MOVEMENT;
    }

    private void updateBodyPartsPosition() {
        if (bodyParts.size > 0) {
            BodyPart bodyPart = bodyParts.removeIndex(0);
            bodyPart.updateBodyPosition(snakeXBeforeUpdate, snakeYBeforeUpdate);
            bodyParts.add(bodyPart);
        }
    }

    private void checkAndPlaceApple() {
        if (!appleAvailable) {
            do {
                appleX = MathUtils.random((int) (viewport.getWorldWidth() / SNAKE_MOVEMENT) - 1) * SNAKE_MOVEMENT;
                appleY = MathUtils.random((int) (viewport.getWorldHeight() / SNAKE_MOVEMENT) - 1) * SNAKE_MOVEMENT;
                appleAvailable = true;
            } while (appleX == snakeX && appleY == snakeY);
        }
    }

    private void checkAppleCollision() {
        if (appleAvailable && appleX == snakeX && appleY == snakeY) {
            BodyPart bodyPart = new BodyPart(snakeBody);
            bodyPart.updateBodyPosition(snakeX, snakeY);
            bodyParts.insert(0, bodyPart);
            addToScore();
            appleAvailable = false;
        }
    }

    private void checkSnakeBodyCollision() {
        for (BodyPart bodyPart : bodyParts) {
            if (bodyPart.x == snakeX && bodyPart.y == snakeY)
                state = STATE.GAME_OVER;
        }
    }

    private void addToScore() {
        score += POINTS_PER_APPLE;
    }

    private void clearScreen() {
        Gdx.gl.glClearColor(Color.BLACK.r, Color.BLACK.g, Color.BLACK.b, Color.BLACK.a);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
    }

    private void drawGrid() {
        shapeRenderer.setProjectionMatrix(camera.projection);
        shapeRenderer.setTransformMatrix(camera.view);
        shapeRenderer.begin(ShapeRenderer.ShapeType.Line);
        for (int x = 0; x < viewport.getWorldWidth(); x += GRID_CELL) {
            for (int y = 0; y < viewport.getWorldHeight(); y += GRID_CELL) {
                shapeRenderer.rect(x, y, GRID_CELL, GRID_CELL);
            }
        }
        shapeRenderer.end();
    }

    private void draw() {
        batch.setProjectionMatrix(camera.projection);
        batch.setTransformMatrix(camera.view);
        batch.begin();
        batch.draw(snakeHead, snakeX, snakeY);
        for (BodyPart bodyPart : bodyParts) {
            bodyPart.draw(batch);
        }
        if (appleAvailable)
            batch.draw(apple, appleX, appleY);
        if (state == STATE.GAME_OVER) {
            layout.setText(bitmapFont, GAME_OVER_TEXT);
            bitmapFont.draw(batch, GAME_OVER_TEXT,
                viewport.getWorldWidth() / 2 - layout.width / 2,
                viewport.getWorldHeight() / 2 - layout.height / 2);
        }
        drawScore();
        batch.end();
    }

    private void drawScore() {
        if (state == STATE.PLAYING) {
            String scoreAsString = Integer.toString(score);
            layout.setText(bitmapFont, scoreAsString);
            bitmapFont.draw(batch, scoreAsString,
                viewport.getWorldWidth() / 2 - layout.width / 2,
                (4 * viewport.getWorldHeight() / 5) - layout.height / 2);
        }
    }

    private void drawDebugArrow() {

        if ("gyroscope".equalsIgnoreCase(controlMode) && DEBUG) {
            float debugX = viewport.getWorldWidth() - 100;
            float debugY = viewport.getWorldHeight() - 100;
            float arrowLength = 50;
            float rad = debugAngle * MathUtils.degreesToRadians;
            float tipX = debugX + arrowLength * MathUtils.cos(rad);
            float tipY = debugY + arrowLength * MathUtils.sin(rad);
            shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);
            shapeRenderer.setColor(Color.RED);
            shapeRenderer.rectLine(debugX, debugY, tipX, tipY, 5);
            shapeRenderer.end();
            batch.begin();
            bitmapFont.draw(batch, "Angle: " + (int) debugAngle, debugX - 40, debugY - 20);
            batch.end();
        }
    }

    @Override
    public void dispose() {
        batch.dispose();
        snakeHead.dispose();
        snakeBody.dispose();
        apple.dispose();
        bitmapFont.dispose();
        shapeRenderer.dispose();
        if (uiStage != null)
            uiStage.dispose();
    }

    private class BodyPart {
        private float x, y;
        private Texture texture;

        public BodyPart(Texture texture) {
            this.texture = texture;
        }

        public void updateBodyPosition(float x, float y) {
            this.x = x;
            this.y = y;
        }

        public void draw(Batch batch) {
            if (!(x == snakeX && y == snakeY))
                batch.draw(texture, x, y);
        }
    }
}

---------------------------

===== Main.java =====
package com.TD1.Pauline;

import com.badlogic.gdx.Game;

public class Main extends Game {
    @Override
    public void create() {
        setScreen(new SplashScreen(this));
    }
}

---------------------------

===== SplashScreen.java =====
package com.TD1.Pauline;

import com.badlogic.gdx.Game;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Preferences;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.InputListener;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.ScreenUtils;
import com.badlogic.gdx.utils.viewport.ScreenViewport;

import java.util.ArrayList;

public class SplashScreen implements Screen {
    private Game game;
    private Stage stage;
    private Skin skin;
    private Preferences prefs;
    private DBAdapter dbAdapter;

    public SplashScreen(final Game game) {
        this.game = game;
        this.dbAdapter = new DBAdapter(); // Initialisation de la base de donn√©es
    }

    @Override
    public void show() {
        stage = new Stage(new ScreenViewport());
        Gdx.input.setInputProcessor(stage);

        try {
            skin = new Skin(Gdx.files.internal("uiskin.json"));
        } catch (Exception e) {
        }

        prefs = Gdx.app.getPreferences("GameScores");


        if (!Gdx.files.internal("background.png").exists()) {
            System.out.println("background.png introuvable !");
        } else {
            System.out.println("background.png trouv√© !");
        }
        Texture bgTexture = new Texture(Gdx.files.internal("background.png"));
        Image background = new Image(bgTexture);
        background.setFillParent(true);
        stage.addActor(background);

        Table table = new Table();
        table.setFillParent(true);
        table.setBackground(skin.newDrawable("white", new Color(0, 0, 0, 0.5f)));
        stage.addActor(table);

        Label titleLabel = new Label("Choose Control Mode", skin);
        titleLabel.setFontScale(2f);
        TextButton touchpadButton = new TextButton("Touchpad", skin);
        TextButton gyroscopeButton = new TextButton("Gyroscope", skin);
        ArrayList<String> topScores = dbAdapter.getTop3Scores();
        StringBuilder scoreText = new StringBuilder("Top Scores:\n");
        for (String scoreEntry : topScores) {
            scoreText.append(scoreEntry).append("\n");
        }
        Label scoreLabel = new Label(scoreText.toString(), skin);
        scoreLabel.setFontScale(1.5f);

        touchpadButton.addListener(new InputListener() {
            @Override
            public boolean touchDown(InputEvent event, float x, float y, int pointer, int button) {
                game.setScreen(new GameScreen(game, "touchpad"));
                return true;
            }
        });

        gyroscopeButton.addListener(new InputListener() {
            @Override
            public boolean touchDown(InputEvent event, float x, float y, int pointer, int button) {
                game.setScreen(new GameScreen(game, "gyroscope"));
                return true;
            }
        });

        table.add(titleLabel).padBottom(40).expandX().row();
        table.add(touchpadButton).padBottom(20).width(300).height(60).row();
        table.add(gyroscopeButton).padBottom(40).width(300).height(60).row();
        table.add(scoreLabel).expandX();
    }

    @Override
    public void render(float delta) {
        ScreenUtils.clear(0, 0, 0, 1);
        stage.act(delta);
        stage.draw();
    }

    @Override
    public void resize(int width, int height) {
        stage.getViewport().update(width, height, true);
    }

    @Override
    public void pause() { }

    @Override
    public void resume() { }

    @Override
    public void hide() {
        dispose();
    }

    @Override
    public void dispose() {
        stage.dispose();
        skin.dispose();
    }
}

---------------------------

